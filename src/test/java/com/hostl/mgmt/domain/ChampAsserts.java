package com.hostl.mgmt.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ChampAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChampAllPropertiesEquals(Champ expected, Champ actual) {
        assertChampAutoGeneratedPropertiesEquals(expected, actual);
        assertChampAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChampAllUpdatablePropertiesEquals(Champ expected, Champ actual) {
        assertChampUpdatableFieldsEquals(expected, actual);
        assertChampUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChampAutoGeneratedPropertiesEquals(Champ expected, Champ actual) {
        assertThat(expected)
            .as("Verify Champ auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChampUpdatableFieldsEquals(Champ expected, Champ actual) {
        assertThat(expected)
            .as("Verify Champ relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getLogin()).as("check login").isEqualTo(actual.getLogin()))
            .satisfies(e -> assertThat(e.getPassword()).as("check password").isEqualTo(actual.getPassword()))
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getAddress()).as("check address").isEqualTo(actual.getAddress()))
            .satisfies(e -> assertThat(e.getMobileNo()).as("check mobileNo").isEqualTo(actual.getMobileNo()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChampUpdatableRelationshipsEquals(Champ expected, Champ actual) {
        assertThat(expected)
            .as("Verify Champ relationships")
            .satisfies(e -> assertThat(e.getRoom()).as("check room").isEqualTo(actual.getRoom()))
            .satisfies(e -> assertThat(e.getParent()).as("check parent").isEqualTo(actual.getParent()));
    }
}
